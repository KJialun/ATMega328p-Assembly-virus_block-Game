
.INCLUDE "m328pdef.inc"

.ORG 0x0000
RJMP init
.ORG 0x0020
RJMP Display


init:
;screen
SBI DDRB,3
CBI PORTB,3 ;PB3 output

SBI DDRB,4
CBI PORTB,4 ;PB4 output

SBI DDRB,5
CBI PORTB,5 ;PB5 output

LDI R20,0b11110000
OUT DDRD,R20

LDI R20,0b11111111
OUT PORTD,R20

;interrupt display
LDI R20,0X04
OUT TCCR0B,R20;set timer0 prescalar to 256

LDI R20,100 ;f=400Hz
OUT TCNT0,R20

SEI ;enable global interrupt
LDI R20,1 ;enable timer0 interrupt
STS TIMSK0,R20

LDI R20,0
MOV R13,R20 

RCALL initialPage ;Store the front page charbuffer in the storage


Start:
	RCALL Scan_keyboard
	RCALL Display
   	LDI R20,1
    CP  R13,R20
	BREQ initial_game
RJMP Start

initial_game :
		RCALL LEVEL1
		RJMP Play_loop



Play_loop:
    RCALL Scan_keyboard	
	RCALL MOVE_VIRUS
	RCALL MOVE_VIRUS2
	RCALL Decision 
	RCALL DRAW_POSITION
	RCALL HUGE_DELAY


RJMP Play_loop


DRAW_POSITION:
	MOV ZH,R24
	MOV ZL,R25
	LDI R20,0 ;BLOCK
	ST Z,R20
	MOV ZH,R22
	MOV ZL,R23
	LDI R20,1 ;BLOCK
	ST Z,R20
	MOV ZH,R19
	MOV ZL,R21
	LDI R20,1 ;BLOCK
	ST Z,R20
RET
initialPage:
;level1 initial state
LDI XL,0x00
LDI XH,0x01
LDI R20,20
ST X+,R20
LDI R20,7
ST X+,R20
LDI R20,5
ST X+,R20
LDI R20,21
ST X+,R20
LDI R20,18
ST X+,R20

LDI R20,2 ;safe place
ST X+,R20
LDI R20,2 
ST X+,R20
LDI R20,0 ; BLOCK
ST X+,R20

LDI R20,1 ;VIRUS
ST X+,R20
LDI R20,2 ;safe place
ST X+,R20
LDI R20,2 
ST X+,R20

;VIRUS
LDI R20,15
ST X+,R20
LDI R20,11
ST X+,R20
LDI R20,16
ST X+,R20
LDI R20,17
ST X+,R20
LDI R20,8
ST X+,R20

RET

LEVEL1:
	;BLOCK initial position
	LDI R24,0x01
	LDI R25,0x00
	/*virus initial position*/
	LDI R22,0x01
	LDI R23,0x07
	/*VIRUS 2 initial position*/
	LDI R19,0x01
	LDI R21,0X0C
RCALL ShowNothing

RET

ShowNothing:
	LDI ZL,0x00
	LDI ZH,0x01
	LDI R20,2
	LDI R17,16
	SNG:
		ST Z+,R20
		DEC R17
		BRNE SNG
RET


//--------------------Button and game logic--------------------//

Scan_keyboard:
;keyboard 4-steps method
	step1:
	;row1
	LDI R20,0b01111111
	OUT PORTD,R20
	NOP
	SBIS PIND,3
	RCALL B7 ;BUTTON7
	SBIS PIND,2
	RCALL notuseButton
	SBIS PIND,1
	RCALL notuseButton ;BUTTON9
	SBIS PIND,0
	RCALL notuseButton ;BUTTONF

	step2:
	;row2
	LDI R20,0b10111111
	OUT PORTD,R20
	NOP
	SBIS PIND,3
	RCALL notuseButton
	SBIS PIND,2
	RCALL B5
	SBIS PIND,1
	RCALL notuseButton
	SBIS PIND,0
	RCALL notuseButton ;BUTTONE

	step3:
	;row3
	LDI R20,0b11011111
	OUT PORTD,R20
	NOP
	SBIS PIND,3
	RCALL B1 ;BUTTON1
	SBIS PIND,2
	RCALL B2
	SBIS PIND,1
	RCALL B3 ;BUTTON3
	SBIS PIND,0
	RCALL notuseButton ;BUTTOND

	step4:
	;row4
	LDI R20,0b11101111
	OUT PORTD,R20
	NOP
	SBIS PIND,3
	RCALL notuseButton ;BUTTONA
	SBIS PIND,2
	RCALL B0 ;BUTTON0
	SBIS PIND,1
	RCALL notuseButton ;BUTTONB
	SBIS PIND,0
	RCALL notuseButton ;BUTTONC

   ;No buttons pressed: 
	CLT
END:
    RET
;up and down
B5:
BRTS END1
RCALL UP
SET
END1:
RJMP END

B0:
BRTS END2
RCALL DOWN
SET
END2:
RJMP END

;left and right
B3:
BRTS END3
RCALL RIGHT
SET
END3:
RJMP END

B1:
BRTS END4
RCALL LEFT
SET
END4:
RJMP END

;restart
B2:
BRTS END5
LDI R20,1
MOV R13,R20
RCALL LEVEL1
SET
END5:
RJMP END


notuseButton:
BRTS END6
CBI PORTC,3
SET
END6:
RJMP END

B7:
BRTS END7
RCALL initialPage
SET
END7:
RJMP END


UP:
RCALL HUGE_DELAY
MOV ZH,R24
MOV ZL,R25
LDI R20,2 ;none
ST Z,R20
LDI R20,8
SUB R25,R20 ;-8
CPI R25,16 ;compare the value, if ZL not between 0-15, then out of boundary
BRSH DoNotmove_UP
RET
DoNotmove_UP:
	ADD R25,R20 ;+8
RET

DOWN:
RCALL HUGE_DELAY
MOV ZH,R24
MOV ZL,R25
LDI R20,2 ;none
ST Z,R20
LDI R20,8
ADD R25,R20 ;+8
CPI R25,16 ;compare the value, if ZL not between 0-15, then out of boundary
BRSH DoNotmove_DOWN
RET
DoNotmove_DOWN:
	SUB R25,R20 ;-8
RET

LEFT:
RCALL HUGE_DELAY
MOV ZH,R24
MOV ZL,R25
LDI R20,2 ;none
ST Z,R20
DEC R25 ;-1
CPI ZL,0 
BREQ JUMBCAK_LEFT
CPI ZL,8 ;compare the value, if ZL not between 0-15, then out of boundary
BREQ  JUMBCAK_LEFT
RET
JUMBCAK_LEFT:
	LDI R20 , 1
	ADD R25,R20 ;-1
RET

RIGHT:
RCALL HUGE_DELAY
MOV ZH,R24
MOV ZL,R25
LDI R20,2 ;none
ST Z,R20
INC R25 ;+1
CPI ZL,7 ;
BREQ JUMBCAK_RIGHT
CPI ZL,15 ;compare the value, if ZL not between 0-15, then out of boundary
BREQ  JUMBCAK_RIGHT
RET
JUMBCAK_RIGHT:
	LDI R20 , 1
	SUB R25,R20 ;-1
RET



MOVE_VIRUS:
MOV ZH,R22
MOV ZL,R23
LDI R20,2 ;none
ST Z,R20
DEC R23
CPI ZL,0 
BREQ JUMBCAK_BACK
RET
JUMBCAK_BACK:
	LDI R20 , 8
	ADD R23,R20 ;-1
RET
MOVE_VIRUS2:
MOV ZH,R19
MOV ZL,R21
LDI R20,2 ;none
ST Z,R20
DEC R21
CPI ZL,8 
BREQ JUMBCAK_BACK2
RET
JUMBCAK_BACK2:
	LDI R20 , 8
	ADD R21,R20 ;-1
RET



Decision:
	CP  R25,R23
	BREQ LOOSE1	
	CP  R25,R21
	BREQ LOOSE1	
RET
LOOSE1:
RCALL LOSEGAME	

LOSEGAME:
	LDI XL,0x00
	LDI XH,0x01

	LDI R20,4
	ST X+,R20
	LDI R20,5
	ST X+,R20
	LDI R20,6
	ST X+,R20
	LDI R20,2
	ST X+,R20
	LDI R20,7
	ST X+,R20
	LDI R20,5
	ST X+,R20
	LDI R20,8
	ST X+,R20
	LDI R20,9
	ST X+,R20

	LDI R20,2
	LDI R17,8
	TEST1:
		ST X+,R20
		DEC R17
		BRNE TEST1

/*	quit play_loop*/
LDI R20,0
MOV R13,R20
RJMP Start



//--------------------DISPLAY  interupt --------------------//

Display:
	LDI R16,100 ;f=400Hz
	OUT TCNT0,R16
	IN R7,SREG
	PUSH R5
	PUSH ZH
	PUSH ZL
	PUSH R7
	PUSH R16
	PUSH R17
	PUSH R18
	PUSH R19
	LDI R16,7 ;rownumbwe-1
	MOV R17,R16
	LDI R16,0b00000001 
	MOV R18,R16

	Send8Row:
		;send column data
		LDI R16,16 ;#block
		MOV R19,R16
		LDI YL,low(0x0110)
		LDI YH,high(0x0110)
		BlockLoop:	
			LDI ZH,high(CharTable<<1)
			LDI ZL,low(CharTable<<1)
			
			CLR R6 ;set R6 to 0 so we can add a zero with carry (this is the same as just adding the carry)
			ADD ZL,R17 ;+(rownumber-1)
			ADC ZH, R6 ;(ADC is add with carry or ZH + R6 + Carry bit)

			LD R16,-Y ;, be careful with X(it does minus first)
			MOV R4,R16
			LDI R16,8 ;+(rownumbwe-1)+8*X
			loop:
				CLR R6
				ADD ZL,R4
				ADC ZH,R6

				DEC R16
				BRNE Loop

			LPM R14,Z
			LDI R16,5
			CLC

			BlockColLoop:
				;send 5 bits of loaded byte to the screen
				CBI PORTB,3
				ROR R14
				BRCC CarryIs0
					SBI PORTB,3
				CarryIs0:
				CBI PORTB,5
				SBI PORTB,5

				DEC R16
				BRNE BlockColLoop

			DEC R19
			BRNE BlockLoop

		LDI R16,8
		CLC

		RowLoop:
				CBI PORTB,3 ;init PB=0
			ROR R18
			BRCC CarryIs1
				SBI PORTB,3
			CarryIs1:
			CBI PORTB,5
			SBI PORTB,5 ;create rising edge of PB5 to shift

			DEC R16 ;loop 8 times
			BRNE RowLoop

	
		RCALL ENABLE


		DEC R17
		TST R18
		BRNE Send8Row
	
		POP R19
		POP R18
		POP R17
		POP R16
		POP R7
		OUT SREG, R7
		POP ZL
		POP ZH
		POP R5
		
RETI
ENABLE:
	SBI PORTB,4
	CBI PORTB,4
RET

DELAY:
	LDI R16,0xFF
	MOV R5,R16
	Delayloop1:
		NOP
		LDI R16,0XFF
		DelayLoop2:
			NOP
			DEC R16
			BRNE DelayLoop2
		DEC R5
		BRNE DelayLoop1
RET

HUGE_DELAY:
RCALL DELAY
RCALL DELAY
RCALL DELAY
RCALL DELAY
RCALL DELAY
RCALL DELAY
RCALL DELAY
RCALL DELAY
RCALL DELAY
RET

//--------------------Char  table --------------------//
CharTable:
.db 0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b11111111,0b00000000 ;pattern block, charbuffer 0
.db 0b00000000,0b00010101,0b00001110,0b00011011,0b00001110,0b00010101,0b00000000,0b00000000 ;pattern virus, charbuffer 1
.db 0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000,0b00000000 ;pattern none, charbuffer 2
.db 0b00000100,0b00001110,0b00010101,0b00000100,0b00010101,0b00010101,0b00011111,0b00000000 ;pattern exit, charbuffer 3

.db 0b00010001,0b00010001,0b00001010,0b00000100,0b00000100,0b00000100,0b00000100,0b00000000;pattern Y, charbuffer 4
.db 0b00001110,0b00010001,0b00010001,0b00010001,0b00010001,0b00010001,0b00001110,0b00000000;pattern O, charbuffer 5
.db 0b00010001,0b00010001,0b00010001,0b00010001,0b00010001,0b00010001,0b00001110,0b00000000;pattern U, charbuffer 6
.db 0b00010000,0b00010000,0b00010000,0b00010000,0b00010000,0b00010000,0b00011111,0b00000000;pattern L, charbuffer 7
.db 0b00001110,0b00010001,0b00010000,0b00001110,0b00000001,0b00010001,0b00001110,0b00000000;pattern S, charbuffer 8
.db 0b00011111,0b00010000,0b00010000,0b00011111,0b00010000,0b00010000,0b00011111,0b00000000;pattern E, charbuffer 9
.db 0b00010001,0b00010001,0b00010101,0b00010101,0b00010101,0b00010101,0b00001010,0b00000000;pattern W, charbuffer 10
.db 0b00011111,0b00000100,0b00000100,0b00000100,0b00000100,0b00000100,0b00011111,0b00000000;pattern I, charbuffer 11
.db 0b00010001,0b00011001,0b00010101,0b00010101,0b00010101,0b00010011,0b00010001,0b00000000;pattern N, charbuffer 12

.db 0b00011100,0b00010010,0b00010001,0b00010001,0b00010001,0b00010010,0b00011100,0b00000000 ;D,charbuffer 13
.db 0b00001110,0b00010001,0b00010000,0b00010111,0b00010001,0b00010001,0b00001111,0b00000000 ;G,charbuffer 14

.db 0b00010001,0b00010001,0b00010001,0b00010001,0b00001010,0b00001010,0b00000100,0b00000000 ;V,charbuffer 15
.db 0b00011110,0b00010001,0b00010001,0b00011110,0b00010100,0b00010010,0b00010001,0b00000000 ;R,charbuffer 16
.db 0b00010001,0b00010001,0b00010001,0b00010001,0b00010001,0b00010001,0b00001110,0b00000000 ;U,charbuffer 17
.db 0b00010001,0b00010010,0b00010100,0b00011000,0b00010100,0b00010010,0b00010001,0b00000000;pattern K, charbuffer 18
.db 0b00000100,0b00001010,0b00010001,0b00011111,0b00010001,0b00010001,0b00010001,0b00000000;pattern A, charbuffer 19
.db 0b00001110,0b00001001,0b00001001,0b00001110,0b00001001,0b00001001,0b00001110,0b00000000;pattern B, charbuffer 20
.db 0b00000110,0b00001001,0b00001000,0b00001000,0b00001000,0b00001001,0b00000110,0b00000000;pattern C, charbuffer 21




